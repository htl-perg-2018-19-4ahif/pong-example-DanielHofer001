{"version":3,"sources":["../src/client/ball.ts"],"names":[],"mappings":"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","file":"ball.js","sourcesContent":["\r\n/**************************************************************************\r\n  NOTE: Take a look at ball-animation-concept.svg/.png to get a better\r\n        understanding of the calculation logic of the ball movement.\r\n\r\n        This code has not been optimized for size or speed. It was written\r\n        with ease of understanding in mind.\r\n**************************************************************************/\r\ninterface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nlet paddle1Pos = 0;\r\nlet paddle2Pos = 0;\r\nasync function runBall() {\r\n\r\n  console.log('Starting Ball !!!!!')\r\n  /** Represents a 2d point */\r\n  interface Point {\r\n    x: number;\r\n    y: number\r\n  };\r\n\r\n  /** Represents the size of a 2d object */\r\n\r\n  /** Represents directions  */\r\n  enum Direction { top, right, bottom, left, leftPaddle, rightPaddle };\r\n\r\n  // Get some information about the browser window and the ball. This information will\r\n  // never change. So it makes sense to get it only once to make the rest of the program faster.\r\n  const ball = document.getElementById('ball');\r\n  const ballSize: Size = { width: ball.clientWidth, height: ball.clientHeight };\r\n  const ballHalfSize = splitSize(ballSize, 2);\r\n  const clientSize: Size = { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };\r\n  const clientHalfSize = splitSize(clientSize, 2);\r\n  let out: boolean = false;\r\n  game();\r\n  async function game() {\r\n    // Move ball to center of the screen\r\n    let ballCurrentPosition: Point = { x: clientHalfSize.width, y: clientHalfSize.height };\r\n    moveBall(ballCurrentPosition);\r\n\r\n    // Calculate the random angle that the ball should initially travel.\r\n    // Should be an angle between 27.5 and 45 DEG (=PI/8 and PI/4 RAD)\r\n    const angle = Math.PI / 8 + Math.random() * Math.PI / 8;\r\n\r\n    // Calculate the random quadrant into which the ball should initially travel.\r\n    // 0 = upper right, 1 = lower right, 2 = lower left, 3 = upper left\r\n    let quadrant = Math.floor(Math.random() * 4);\r\n    out = false;\r\n    let paddle = <HTMLDivElement>document.getElementsByClassName('leftpaddle')[0];\r\n    const keys = <HTMLUListElement>document.getElementById('keys');\r\n\r\n    do {\r\n      // Calculate target.\r\n      // X-coordinate iw either right or left border of browser window (depending on\r\n      //              target quadrant)\r\n      // y-coordinate is calculated using tangens angle function of angle\r\n      //              (note: tan(angle) = delta-y / delta-x). The sign depends on\r\n      //              the target quadrant)\r\n      const targetX = (quadrant === 0 || quadrant === 1) ? clientSize.width - ballSize.width : 0;\r\n      const targetBallPosition: Point = {\r\n        x: targetX,\r\n        y: ballCurrentPosition.y + Math.tan(angle) * Math.abs(targetX - ballCurrentPosition.x) * ((quadrant === 0 || quadrant === 3) ? -1 : 1)\r\n      };\r\n\r\n      // Animate ball to calculated target position\r\n      const borderTouch = await animateBall(ballCurrentPosition, targetBallPosition);\r\n\r\n      // Based on where the ball touched the browser window, we change the new target quadrant.\r\n      // Note that in this solution the angle stays the same.\r\n\r\n      //const newLi = document.createElement('li');\r\n\r\n      switch (borderTouch.touchDirection) {\r\n        case Direction.left:\r\n          quadrant = (quadrant === 2) ? 1 : 0;\r\n          // newLi.innerText = `(left) Paddle ${paddle1Pos} | ball: ${targetBallPosition.y}`;\r\n          // keys.appendChild(newLi);\r\n          if (paddle1Pos <= targetBallPosition.y && paddle1Pos + paddle.clientHeight >= targetBallPosition.y) {\r\n          } else {\r\n            socket.emit('player1');\r\n            out = true;\r\n          }\r\n\r\n          break;\r\n        case Direction.right:\r\n          quadrant = (quadrant === 0) ? 3 : 2;\r\n          // newLi.innerText = `(right) Paddle ${paddle2Pos} | ball: ${targetBallPosition.y}`;\r\n          // keys.appendChild(newLi);\r\n          if (paddle2Pos <= targetBallPosition.y && paddle2Pos + paddle.clientHeight >= targetBallPosition.y) {\r\n          } else {\r\n            socket.emit('player2');\r\n            out = true;\r\n          }\r\n          break;\r\n        case Direction.top:\r\n          quadrant = (quadrant === 0) ? 1 : 2;\r\n          break;\r\n        case Direction.bottom:\r\n          quadrant = (quadrant === 2) ? 3 : 0;\r\n          break;\r\n        default:\r\n          throw new Error('Invalid direction, should never happen');\r\n      }\r\n\r\n      // The touch position is the new current position of the ball.\r\n      // Note that we fix the position here slightly in case a small piece of the ball has reached an area\r\n      // outside of the visible browser window.\r\n      ballCurrentPosition.x = Math.min(Math.max(borderTouch.touchPosition.x - ballHalfSize.width, 0) + ballHalfSize.width, clientSize.width);\r\n      ballCurrentPosition.y = Math.min(Math.max(borderTouch.touchPosition.y - ballHalfSize.height, 0) + ballHalfSize.height, clientSize.height);\r\n    } while (!out); // until out\r\n\r\n    if (socket.connected) {\r\n      game();\r\n    } else {\r\n      process.exit(-1);\r\n    }\r\n  }\r\n  /**\r\n   * Animate the ball from the current position to the target position. Stops\r\n   * animation if border of browser window is reached.\r\n   * @returns Position and direction where ball touched the border of the browser window\r\n   *          at the end of the animation\r\n   */\r\n  function animateBall(currentBallPosition: Point, targetBallPosition: Point): Promise<{ touchPosition: Point, touchDirection: Direction }> {\r\n    // Calculate x and y distances from current to target position\r\n    const distanceToTarget: Size = subtractPoints(targetBallPosition, currentBallPosition);\r\n\r\n    // Use Pythagoras to calculate distance from current to target position\r\n    const distance = Math.sqrt(distanceToTarget.width * distanceToTarget.width + distanceToTarget.height * distanceToTarget.height);\r\n\r\n    // Variable defining the speed of the animation (pixels that the ball travels per interval)\r\n    const pixelsPerInterval = 1;\r\n\r\n    // Calculate distance per interval\r\n    const distancePerInterval = splitSize(distanceToTarget, distance * pixelsPerInterval);\r\n\r\n    // Return a promise that will resolve when animation is done\r\n    return new Promise<{ touchPosition: Point, touchDirection: Direction }>(res => {\r\n      // Start at current ball position\r\n      let animatedPosition: Point = currentBallPosition;\r\n\r\n      // Move point every 4ms\r\n      const interval = setInterval(() => {\r\n        // Move animated position by the distance it has to travel per interval\r\n        animatedPosition = movePoint(animatedPosition, distancePerInterval);\r\n\r\n        // Move the ball to the new position\r\n        moveBall(animatedPosition);\r\n\r\n        // Check if the ball touches the browser window's border\r\n        let touchDirection: Direction;\r\n        /* if(overlaps(leftpaddle, animateBall)){\r\n           touchDirection=Direction.leftPaddle;\r\n         }\r\n         if(overlaps(rightpaddle, animateBall)){\r\n           touchDirection=Direction.leftPaddle;\r\n         }*/\r\n        if ((animatedPosition.x - ballHalfSize.width) < 0) { touchDirection = Direction.left; }\r\n        if ((animatedPosition.y - ballHalfSize.height) < 0) { touchDirection = Direction.top; }\r\n        if ((animatedPosition.x + ballHalfSize.width) > clientSize.width) { touchDirection = Direction.right; }\r\n        if ((animatedPosition.y + ballHalfSize.height) > clientSize.height) { touchDirection = Direction.bottom; }\r\n\r\n        if (touchDirection !== undefined) {\r\n          // Ball touches border -> stop animation\r\n          clearInterval(interval);\r\n          res({ touchPosition: animatedPosition, touchDirection: touchDirection });\r\n        }\r\n      }, 4);\r\n    });\r\n  }\r\n\r\n  /** Move the center of the ball to given position **/\r\n  function moveBall(targetPosition: Point): void {\r\n    // Note the 'px' at the end of the coordinates for CSS. Don't\r\n    // forget it. Without the 'px', it doesn't work.\r\n    const leftPos = `${targetPosition.x - ballHalfSize.width}px`;\r\n    const topPos = `${targetPosition.y - ballHalfSize.height}px`;\r\n\r\n    if (ball.style.left !== leftPos) {\r\n      ball.style.setProperty('left', leftPos);\r\n      socket.emit('left', leftPos)\r\n    }\r\n\r\n    if (ball.style.top !== topPos) {\r\n      ball.style.setProperty('top', topPos);\r\n      socket.emit('top', topPos)\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /** Subtracts two points and returns the size between them */\r\n  function subtractPoints(a: Point, b: Point): Size {\r\n    return {\r\n      width: a.x - b.x,\r\n      height: a.y - b.y\r\n    };\r\n  }\r\n\r\n  /** Moves a point by the given size */\r\n  function movePoint(p: Point, s: Size): Point {\r\n    return {\r\n      x: p.x + s.width,\r\n      y: p.y + s.height\r\n    };\r\n  }\r\n\r\n  /** Divides the width and height of the given size by the given divider */\r\n  function splitSize(s: Size, divider: number): Size {\r\n    return {\r\n      width: s.width / divider,\r\n      height: s.height / divider\r\n    };\r\n  }\r\n\r\n}\r\n\r\nwindow.addEventListener('load', async () => {\r\n  const clientSize: Size = { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };\r\n\r\n  const ball = document.getElementById('ball');\r\n\r\n  socket.on('left', code => {\r\n    //socket.emit('left', code)\r\n    ball.style.setProperty('left', `${(clientSize.width - parseFloat(code)).toString()}px`);\r\n  });\r\n\r\n  socket.on('top', code => {\r\n    // socket.emit('top', code)\r\n    ball.style.setProperty('top', `${parseFloat(code).toString()}px`);\r\n  });\r\n\r\n  socket.on('move2', code => {\r\n    // socket.emit('top', code)\r\n    paddle2Pos = parseInt(code);\r\n\r\n  });\r\n  socket.on('move1', code => {\r\n    // socket.emit('top', code)\r\n    paddle1Pos = parseInt(code);\r\n\r\n  });\r\n});\r\n"]}